// src/views/index.ejs
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Network Monitor</title>
  <!-- Include Bootstrap CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
</head>
<body>
  <%- include('partials/header') %>

  <div class="container mt-4">
    <h1>Network Monitor</h1>
    <table class="table">
      <thead>
        <tr>
          <th>IP Address</th>
          <th>Device Name</th>
          <th>OS</th>
          <th>Notifications</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="deviceTable">
        <!-- Devices will be rendered here -->
      </tbody>
    </table>
  </div>

  <%- include('partials/footer') %>

  <!-- Include Socket.IO client library -->
  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();

    // Handle device updates
    socket.on('deviceUpdated', (device) => {
      updateDeviceRow(device);
    });

    // Handle new device detection
    socket.on('newDeviceDetected', (device) => {
      addDeviceRow(device);
    });

    // Function to add a new device row
    function addDeviceRow(device) {
      const row = `
        <tr>
          <td>${device.ipAddress}</td>
          <td>${device.deviceName}</td>
          <td>${device.os}</td>
          <td>
            <input type="checkbox" class="form-check-input" id="notificationsEnabled-${device.id}" ${device.notificationsEnabled ? 'checked' : ''}>
          </td>
          <td>
            <button class="btn btn-primary btn-sm" onclick="editDevice(${device.id})">Edit</button>
            <button class="btn btn-danger btn-sm" onclick="deleteDevice(${device.id})">Delete</button>
          </td>
        </tr>
      `;
      document.getElementById('deviceTable').insertAdjacentHTML('beforeend', row);
    }

    // Function to update an existing device row
    function updateDeviceRow(device) {
      const row = document.querySelector(`#deviceTable tr[data-id="${device.id}"]`);
      if (row) {
        row.querySelector('td:nth-child(1)').textContent = device.ipAddress;
        row.querySelector('td:nth-child(2)').textContent = device.deviceName;
        row.querySelector('td:nth-child(3)').textContent = device.os;
        row.querySelector('td:nth-child(4) input').checked = device.notificationsEnabled;
      }
    }

    // Function to edit a device
    function editDevice(id) {
      const device = findDeviceById(id);
      // Open a modal or prompt to edit device details
      // Update the device using socket.emit('updateDevice', updatedDevice)
    }

    // Function to delete a device
    function deleteDevice(id) {
      const device = findDeviceById(id);
      if (confirm(`Are you sure you want to delete ${device.deviceName}?`)) {
        // Send a request to delete the device
        // If successful, remove the device row from the table
      }
    }

    // Function to find a device by ID
    function findDeviceById(id) {
      const rows = document.querySelectorAll('#deviceTable tr');
      for (const row of rows) {
        if (row.dataset.id === id.toString()) {
          return {
            id: id,
            ipAddress: row.querySelector('td:nth-child(1)').textContent,
            deviceName: row.querySelector('td:nth-child(2)').textContent,
            os: row.querySelector('td:nth-child(3)').textContent,
            notificationsEnabled: row.querySelector('td:nth-child(4) input').checked
          };
        }
      }
      return null;
    }
  </script>
</body>
</html>